69a70,72
> //
> // RNC:
> // 2022-03-11   - removed RGB MUX in favour of pixel MUX, merged HAM and CLUT into single module
70a74
> 
73,89c77,93
< 	input 	clk28m,					// 35ns pixel clock
< 	input 	clk,		   			// bus clock / lores pixel clock
< 	input 	c1 ,					// 35ns clock enable signals (for synchronization with clk)
< 	input 	c3,
< 	input 	cck,					// colour clock enable
< 	input 	reset,					// reset
< 	input	strhor,					// horizontal strobe
< 	input 	[8:1] reg_address_in,	// register adress inputs
< 	input 	[15:0] data_in,			// bus data in
< 	output 	[15:0] data_out,		// bus data out
< 	input	blank,					// blanking input
< 	output 	[3:0] red, 				// red componenent video out
< 	output 	[3:0] green,  			// green component video out
< 	output 	[3:0] blue,				// blue component video out
< 	input	ecs,					// enables ECS chipset features
< 	input	a1k,					// control EHB chipset feature
< 	output	reg hires				// hires
---
>     input           clk28m,         // 35ns pixel clock
>     input           clk,            // bus clock / lores pixel clock
>     input           c1 ,            // 35ns clock enable signals (for synchronization with clk)
>     input           c3,
>     input           cck,            // colour clock enable
>     input           reset,          // reset
>     input           strhor,         // horizontal strobe
>     input   [8:1]   reg_address_in, // register adress inputs
>     input   [15:0]  data_in,        // bus data in
>     output  [15:0]  data_out,       // bus data out
>     input           blank,          // blanking input
>     output  [3:0]   red,            // red componenent video out
>     output  [3:0]   green,          // green component video out
>     output  [3:0]   blue,           // blue component video out
>     input           ecs,            // enables ECS chipset features
>     input           a1k,            // control EHB chipset feature
>     output reg      hires           // hires
92,100c96,97
< //register names and adresses
< parameter DIWSTRT  = 9'h08E;
< parameter DIWSTOP  = 9'h090;
< parameter DIWHIGH  = 9'h1E4;
< parameter BPLCON0  = 9'h100;
< parameter BPLCON2  = 9'h104;
< parameter BPLCON3  = 9'h106;
< parameter DENISEID = 9'h07C;
< parameter BPL1DAT  = 9'h110;
---
>     
>    
102,112c99,119
< //local signals
< reg		[8:0] hpos;				// horizontal beamcounter
< reg		shres;					// super high resolution select
< reg		homod;					// HAM mode select
< reg		dblpf;					// double playfield select
< reg		[3:0] bpu;				// bitplane enable
< reg		[3:0] l_bpu;			// latched bitplane enable
< reg		enaecs;					// enable ECS features like border blank (bplcon0.0)
< reg		[15:0] bplcon2;			// bplcon2 (playfield video priority) register
< reg		[15:0] bplcon3;			// bplcon3 register (border blank)
< wire 	brdrblnk;					// border blank enable
---
>     //register names and adresses
>     parameter DIWSTRT  = 9'h08E;
>     parameter DIWSTOP  = 9'h090;
>     parameter DIWHIGH  = 9'h1E4;
>     parameter BPLCON0  = 9'h100;
>     parameter BPLCON2  = 9'h104;
>     parameter BPLCON3  = 9'h106;
>     parameter DENISEID = 9'h07C;
>     parameter BPL1DAT  = 9'h110;
>     
>     //local signals
>     reg		[8:0] hpos;				// horizontal beamcounter
>     reg		shres;					// super high resolution select
>     reg		homod;					// HAM mode select
>     reg		dblpf;					// double playfield select
>     reg		[3:0] bpu;				// bitplane enable
>     reg		[3:0] l_bpu;			// latched bitplane enable
>     reg		enaecs;					// enable ECS features like border blank (bplcon0.0)
>     reg		[15:0] bplcon2;			// bplcon2 (playfield video priority) register
>     reg		[15:0] bplcon3;			// bplcon3 register (border blank)
>     wire 	brdrblnk;					// border blank enable
114,115c121,122
< reg		[8:0] hdiwstrt;			// horizontal display window start position
< reg		[8:0] hdiwstop;			// horizontal display window stop position
---
>     reg		[8:0] hdiwstrt;			// horizontal display window start position
>     reg		[8:0] hdiwstop;			// horizontal display window stop position
117,123c124,132
< wire	[6:1] bpldata_out;		// bitplane serial data out from shifters
< wire	[6:1] bpldata;			// raw bitplane serial video data
< wire	[3:0] sprdata;			// sprite serial video data
< wire	[5:0] plfdata;			// playfield serial video data
< wire	[2:1] nplayfield;		// playfield 1,2 valid data signals
< wire	[7:0] nsprite;			// sprite 0-7 valid data signals 
< wire	sprsel;					// sprite select
---
>     wire	[6:1] bpldata_out;		// bitplane serial data out from shifters
>     
>     wire	[6:1] bpldata;			// active bitplane serial video data
>     wire	[3:0] sprdata;			// active sprite serial video data
>     
>     wire	[5:0] plfdata;			// playfield serial video data
>     wire	[2:1] nplayfield;		// playfield 1,2 valid data signals
>     wire	[7:0] nsprite;			// sprite 0-7 valid data signals 
>     wire	sprsel;					// sprite select
125,129c134,136
< wire	[11:0] ham_rgb;			// hold and modify mode RGB video data
< reg		[5:0] clut_data;		// colour table colour select in
< wire	[11:0] clut_rgb;		// colour table rgb data out
< wire	[11:0] out_rgb;			// final multiplexer rgb output data
< reg		window;					// window enable signal
---
>     wire	[5:0] clut_data;		// colour table colour select in
>     wire	[11:0] out_rgb;			// final multiplexer rgb output data
>     reg		window;					// window enable signal
131,132c138,139
< wire	[15:0] deniseid_out; 	// deniseid data_out
< wire	[15:0] col_out;			// colision detection data_out
---
>     wire	[15:0] deniseid_out; 	// deniseid data_out
>     wire	[15:0] col_out;			// colision detection data_out
134c141
< reg		display_ena;					// in OCS sprites are visible between first write to BPL1DAT and end of scanline
---
>     reg		display_ena;			// in OCS sprites are visible between first write to BPL1DAT and end of scanline
136c143
< //--------------------------------------------------------------------------------------
---
>     //--------------------------------------------------------------------------------------
138,139c145,146
< // data out mulitplexer
< assign data_out = col_out | deniseid_out;
---
>     // data out mulitplexer
>     assign data_out = col_out | deniseid_out;
141c148
< //--------------------------------------------------------------------------------------
---
>     //--------------------------------------------------------------------------------------
143,148c150,155
< // Denise horizontal counter counting range: $01-$E3 CCKs (2-455 lores pixels)
< always @(posedge clk)
< 	if (strhor)
< 		hpos <= 2;
< 	else
< 		hpos <= hpos + 1;
---
>     // Denise horizontal counter counting range: $01-$E3 CCKs (2-455 lores pixels)
>     always @(posedge clk)
>         if (strhor)
>             hpos <= 2;
>         else
>             hpos <= hpos + 1;
150c157
< //--------------------------------------------------------------------------------------
---
>     //--------------------------------------------------------------------------------------
152,157c159,164
< // sprite display enable signal - sprites are visible after the first write to the BPL1DAT register in a scanline
< always @(posedge clk)
< 	if (reset || blank)
< 		display_ena <= 0;
< 	else if (reg_address_in[8:1]==BPL1DAT[8:1])
< 		display_ena <= 1;
---
>     // sprite display enable signal - sprites are visible after the first write to the BPL1DAT register in a scanline
>     always @(posedge clk)
>         if (reset || blank)
>             display_ena <= 0;
>         else if (reg_address_in[8:1]==BPL1DAT[8:1])
>             display_ena <= 1;
159,162c166,169
< // bpu is updated when bpl1dat register is written
< always @(posedge clk)
< 	if (reg_address_in[8:1]==BPL1DAT[8:1])
< 		l_bpu <= bpu;
---
>     // bpu is updated when bpl1dat register is written
>     always @(posedge clk)
>         if (reg_address_in[8:1]==BPL1DAT[8:1])
>             l_bpu <= bpu;
164,183c171,190
< // BPLCON0 register
< always @(posedge clk)
< 	if (reset)
< 	begin
< 		hires <= 0;
< 		shres <= 0;
< 		homod <= 0;
< 		dblpf <= 0;
< 		bpu <= 0;
< 		enaecs <= 0;
< 	end
< 	else if (reg_address_in[8:1]==BPLCON0[8:1])
< 	begin
< 		hires <= data_in[15];
< 		shres <= data_in[6];
< 		homod <= data_in[11];
< 		dblpf <= data_in[10];
< 		bpu <= {data_in[4],data_in[14:12]};
< 		enaecs <= data_in[0];
< 	end
---
>     // BPLCON0 register
>     always @(posedge clk)
>         if (reset)
>         begin
>             hires <= 0;
>             shres <= 0;
>             homod <= 0;
>             dblpf <= 0;
>             bpu <= 0;
>             enaecs <= 0;
>         end
>         else if (reg_address_in[8:1]==BPLCON0[8:1])
>         begin
>             hires <= data_in[15];
>             shres <= data_in[6];
>             homod <= data_in[11];
>             dblpf <= data_in[10];
>             bpu <= {data_in[4],data_in[14:12]};
>             enaecs <= data_in[0];
>         end
185,190c192,197
< // BPLCON2 register
< always @(posedge clk)
< 	if (reset)
< 		bplcon2 <= 16'h00_00;
< 	else if (reg_address_in[8:1]==BPLCON2[8:1])
< 		bplcon2[15:0] <= data_in[15:0];
---
>     // BPLCON2 register
>     always @(posedge clk)
>         if (reset)
>             bplcon2 <= 16'h00_00;
>         else if (reg_address_in[8:1]==BPLCON2[8:1])
>             bplcon2[15:0] <= data_in[15:0];
192,197c199,204
< // BPLCON3 register
< always @(posedge clk)
< 	if (reset)
< 		bplcon3 <= 16'h00_00;
< 	else if (reg_address_in[8:1]==BPLCON3[8:1])
< 		bplcon3[15:0] <= data_in[15:0];
---
>     // BPLCON3 register
>     always @(posedge clk)
>         if (reset)
>             bplcon3 <= 16'h00_00;
>         else if (reg_address_in[8:1]==BPLCON3[8:1])
>             bplcon3[15:0] <= data_in[15:0];
199c206
< assign brdrblnk = bplcon3[5];
---
>     assign brdrblnk = bplcon3[5];
201c208
< // DIWSTART and DIWSTOP registers (vertical and horizontal limits of display window)
---
>     // DIWSTART and DIWSTOP registers (vertical and horizontal limits of display window)
203,206c210,213
< // HDIWSTRT
< always @(posedge clk)
< 	if (reg_address_in[8:1]==DIWSTRT[8:1])
< 		hdiwstrt[7:0] <= data_in[7:0];
---
>     // HDIWSTRT
>     always @(posedge clk)
>         if (reg_address_in[8:1]==DIWSTRT[8:1])
>             hdiwstrt[7:0] <= data_in[7:0];
208,212c215,219
< always @(posedge clk)
< 	if (reg_address_in[8:1]==DIWSTRT[8:1])
< 		hdiwstrt[8] <= 1'b0; // diwstop H9 = 0
< 	else if (reg_address_in[8:1]==DIWHIGH[8:1] && ecs)
< 		hdiwstrt[8] <= data_in[5];
---
>     always @(posedge clk)
>         if (reg_address_in[8:1]==DIWSTRT[8:1])
>             hdiwstrt[8] <= 1'b0; // diwstop H9 = 0
>         else if (reg_address_in[8:1]==DIWHIGH[8:1] && ecs)
>             hdiwstrt[8] <= data_in[5];
214,217c221,224
< // HDIWSTOP
< always @(posedge clk)
< 	if (reg_address_in[8:1]==DIWSTOP[8:1])
< 		hdiwstop[7:0] <= data_in[7:0];
---
>     // HDIWSTOP
>     always @(posedge clk)
>         if (reg_address_in[8:1]==DIWSTOP[8:1])
>             hdiwstop[7:0] <= data_in[7:0];
219,223c226,230
< always @(posedge clk)
< 	if (reg_address_in[8:1]==DIWSTOP[8:1])
< 		hdiwstop[8] <= 1'b1; // diwstop H8 = 1
< 	else if (reg_address_in[8:1]==DIWHIGH[8:1] && ecs)
< 		hdiwstop[8] <= data_in[13];
---
>     always @(posedge clk)
>         if (reg_address_in[8:1]==DIWSTOP[8:1])
>             hdiwstop[8] <= 1'b1; // diwstop H8 = 1
>         else if (reg_address_in[8:1]==DIWHIGH[8:1] && ecs)
>             hdiwstop[8] <= data_in[13];
225c232
< assign deniseid_out = reg_address_in[8:1]==DENISEID[8:1] ? ecs ? 16'hFF_FC : 16'hFF_FF : 16'h00_00;
---
>     assign deniseid_out = reg_address_in[8:1]==DENISEID[8:1] ? ecs ? 16'hFF_FC : 16'hFF_FF : 16'h00_00;
227c234
< //--------------------------------------------------------------------------------------
---
>     //--------------------------------------------------------------------------------------
229,235c236,242
< // generate window enable signal
< // true when beamcounter satisfies horizontal diwstrt/diwstop limits
< always @(posedge clk)
< 	if (hpos[8:0]==hdiwstrt[8:0])
< 		window <= 1;
< 	else if (hpos[8:0]==hdiwstop[8:0])
< 		window <= 0;
---
>     // generate window enable signal
>     // true when beamcounter satisfies horizontal diwstrt/diwstop limits
>     always @(posedge clk)
>         if (hpos[8:0]==hdiwstrt[8:0])
>             window <= 1;
>         else if (hpos[8:0]==hdiwstop[8:0])
>             window <= 0;
237,239c244,246
< reg window_ena;
< always @(posedge clk)
< 	window_ena <= window;
---
>     reg window_ena;
>     always @(posedge clk)
>         window_ena <= window;
241c248
< //--------------------------------------------------------------------------------------
---
>     //--------------------------------------------------------------------------------------
243,256c250,263
< // instantiate bitplane module
< bitplanes bplm0
< (
< 	.clk(clk),
< 	.clk28m(clk28m),
< 	.c1(c1),
< 	.c3(c3),
< 	.reg_address_in(reg_address_in),
< 	.data_in(data_in),
< 	.hires(hires),
< 	.shres(shres & ecs),
< 	.hpos(hpos),
< 	.bpldata(bpldata_out)
< );
---
>     // instantiate bitplane module
>     bitplanes bplm0
>     (
>         .clk(clk),
>         .clk28m(clk28m),
>         .c1(c1),
>         .c3(c3),
>         .reg_address_in(reg_address_in),
>         .data_in(data_in),
>         .hires(hires),
>         .shres(shres & ecs),
>         .hpos(hpos),
>         .bpldata(bpldata_out)
>     );
258,263c265,270
< assign bpldata[1] = l_bpu > 0 ? bpldata_out[1] : 1'b0;
< assign bpldata[2] = l_bpu > 1 ? bpldata_out[2] : 1'b0;
< assign bpldata[3] = l_bpu > 2 ? bpldata_out[3] : 1'b0;
< assign bpldata[4] = l_bpu > 3 ? bpldata_out[4] : 1'b0;
< assign bpldata[5] = l_bpu > 4 ? bpldata_out[5] : 1'b0;
< assign bpldata[6] = l_bpu > 5 ? bpldata_out[6] : 1'b0;
---
>     assign bpldata[1] = l_bpu > 0 ? bpldata_out[1] : 1'b0;
>     assign bpldata[2] = l_bpu > 1 ? bpldata_out[2] : 1'b0;
>     assign bpldata[3] = l_bpu > 2 ? bpldata_out[3] : 1'b0;
>     assign bpldata[4] = l_bpu > 3 ? bpldata_out[4] : 1'b0;
>     assign bpldata[5] = l_bpu > 4 ? bpldata_out[5] : 1'b0;
>     assign bpldata[6] = l_bpu > 5 ? bpldata_out[6] : 1'b0;
265,273c272,280
< // instantiate playfield module
< playfields plfm0
< (
< 	.bpldata(bpldata),
< 	.dblpf(dblpf),
< 	.bplcon2(bplcon2[6:0]),
< 	.nplayfield(nplayfield),
< 	.plfdata(plfdata)
< );
---
>     // instantiate playfield module
>     playfields plfm0
>     (
>         .bpldata(bpldata),
>         .dblpf(dblpf),
>         .bplcon2(bplcon2[6:0]),
>         .nplayfield(nplayfield),
>         .plfdata(plfdata)
>     );
275,286c282,293
< // instantiate sprite module
< sprites sprm0
< (
< 	.clk(clk),
< 	.reset(reset),
< 	.reg_address_in(reg_address_in),
< 	.hpos(hpos),
< 	.data_in(data_in),
< 	.sprena(display_ena),
< 	.nsprite(nsprite),
< 	.sprdata(sprdata)
< );
---
>     // instantiate sprite module
>     sprites sprm0
>     (
>         .clk(clk),
>         .reset(reset),
>         .reg_address_in(reg_address_in),
>         .hpos(hpos),
>         .data_in(data_in),
>         .sprena(display_ena),
>         .nsprite(nsprite),
>         .sprdata(sprdata)
>     );
288,295c295,302
< // instantiate video priority logic module
< sprpriority spm0
< (
< 	.bplcon2(bplcon2[5:0]),
< 	.nplayfield(nplayfield),
< 	.nsprite(nsprite),
< 	.sprsel(sprsel)
< );
---
>     // instantiate video priority logic module
>     sprpriority spm0
>     (
>         .bplcon2(bplcon2[5:0]),
>         .nplayfield(nplayfield),
>         .nsprite(nsprite),
>         .sprsel(sprsel)
>     );
297,307d303
< // instantiate colour look up table
< colortable clut0
< (
< 	.clk(clk),
< 	.clk28m(clk28m),
< 	.reg_address_in(reg_address_in),
< 	.data_in(data_in[11:0]),
< 	.select(clut_data),
< 	.a1k(a1k),
< 	.rgb(clut_rgb) // rgb data is delayed by one clk28m clock cycle
< );
309,318c305,314
< // instantiate HAM (hold and modify) module
< hamgenerator ham0
< (
< 	.clk(clk),
< 	.clk28m(clk28m),
< 	.reg_address_in(reg_address_in),
< 	.data_in(data_in[11:0]),
< 	.bpldata(bpldata),
< 	.rgb(ham_rgb)
< );
---
>     // instantiate HAM (hold and modify) module
> //    hamgenerator ham0
> //    (
> //        .clk(clk),
> //        .clk28m(clk28m),
> //        .reg_address_in(reg_address_in),
> //        .data_in(data_in[11:0]),
> //        .bpldata(bpldata),
> //        .rgb(ham_rgb)
> //    );
320,333c316,327
< // instantiate collision detection module
< collision col0
< (
< 	.clk(clk),
< 	.reset(reset),
< 	.reg_address_in(reg_address_in),
< 	.data_in(data_in),
< 	.data_out(col_out),
< 	.dblpf(dblpf),
< 	.bpldata(bpldata),
< 	.nsprite(nsprite)
< );
< 
< //--------------------------------------------------------------------------------------
---
>     // instantiate collision detection module
>     collision col0
>     (
>         .clk(clk),
>         .reset(reset),
>         .reg_address_in(reg_address_in),
>         .data_in(data_in),
>         .data_out(col_out),
>         .dblpf(dblpf),
>         .bpldata(bpldata),
>         .nsprite(nsprite)
>     );
335,344c329,340
< //
< always @(sprsel or window_ena or sprdata or plfdata)
< begin
< 	if (!window_ena) // we are outside of the visible window region, display border colour
< 		clut_data = 6'b000000;
< 	else if (sprsel) // select sprites
< 		clut_data = {2'b01,sprdata[3:0]};
< 	else // select playfield
< 		clut_data = plfdata;
< end
---
>     //--------------------------------------------------------------------------------------
>     //
> //    always @(sprsel or window_ena or sprdata or plfdata)
> //    begin
> //        if (!window_ena) // we are outside of the visible window region, display border colour
> //            clut_data = 6'b000000;
> //        else if (sprsel) // select sprites
> //            clut_data = {2'b01,sprdata[3:0]};
> //        else // select playfield
> //            clut_data = plfdata;
> //    end
>     assign clut_data = (!window_ena) ? 6'b000000 : (sprsel ? {2'b01,sprdata[3:0]} : plfdata);
346,347c342,343
< reg window_del;
< reg sprsel_del;
---
>     reg window_del;
>     reg sprsel_del;
349,353c345,349
< always @(posedge clk28m)
< begin
< 	window_del <= window_ena;
< 	sprsel_del <= sprsel;
< end
---
>     always @(posedge clk28m)
>     begin
>         window_del <= window_ena;
>         sprsel_del <= sprsel;
>     end
355,356c351,353
< // ham_rgb / clut_rgb multiplexer
< assign out_rgb = homod && window_del && !sprsel_del ? ham_rgb : clut_rgb; //if no HAM mode, always select normal (table selected) rgb data
---
>     // ham_rgb / clut_rgb multiplexer
>     //if no HAM mode, always select normal (table selected) rgb data
>     assign homod_pri = homod && window_del && !sprsel_del;
358c355
< //--------------------------------------------------------------------------------------
---
>     wire t_blank = blank | ecs & enaecs & brdrblnk & (~window_del | ~display_ena);
360c357,369
< wire t_blank;
---
>     // instantiate colour look up table
>     colortable clut0
>     (
>         .clk(clk),
>         .clk28m(clk28m),
>         .reg_address_in(reg_address_in),
>         .data_in(data_in[11:0]),
>         .select(clut_data),
>         .a1k(a1k),
>         .ham(homod_pri),
>         .blank(t_blank),
>         .rgb(out_rgb) // rgb data is delayed by one clk28m clock cycle
>     );
362d370
< assign t_blank = blank | ecs & enaecs & brdrblnk & (~window_del | ~display_ena);
364,365d371
< // RGB video output
< assign {red[3:0],green[3:0],blue[3:0]} = t_blank ? 12'h000 : out_rgb;
366a373,383
>     //assign out_rgb = homod &&  ? ham_rgb : clut_rgb; 
> 
>     //--------------------------------------------------------------------------------------
> 
> 
>     // RGB video output
>     assign {red[3:0],green[3:0],blue[3:0]} = out_rgb; //t_blank ? 12'h000 : out_rgb;
> 
> 
> 
> 
384c401,403
< 	input	a1k,							// EHB control
---
> 	input	a1k,					// EHB control
>     input   ham,                    // enable ham output
>     input   blank,                  // emit nothing
388,389c407,408
< // register names and adresses		
< parameter COLORBASE = 9'h180;  		// colour table base address
---
>     // register names and adresses		
>     parameter COLORBASE = 9'h180;  		// colour table base address
391,393c410,414
< // local signals
< reg 	[11:0] colortable [31:0];	// colour table
< wire	[11:0] selcolor; 			// selected colour register output
---
>     // local signals
>     reg 	[11:0] colortable [31:0];	// colour table
>     wire	[11:0] selcolor; 			// selected colour register output
>     
>     wire    [5:0]  
395,398c416,419
< // writing of colour table from bus (implemented using dual port distributed ram)
< always @(posedge clk)
< 	if (reg_address_in[8:6]==COLORBASE[8:6])
< 		colortable[reg_address_in[5:1]] <= data_in[11:0];
---
>     // writing of colour table from bus (implemented using dual port distributed ram)
>     always @(posedge clk)
>         if (reg_address_in[8:6]==COLORBASE[8:6])
>             colortable[reg_address_in[5:1]] <= data_in[11:0];
400,401c421,422
< // reading of colour table
< assign selcolor = colortable[select[4:0]];   
---
>     // reading of colour table
>     assign selcolor = colortable[select[4:0]];
403,408c424,443
< // extra half brite mode shifter
< always @(posedge clk28m)
< 	if (select[5] && !a1k) // half bright, shift every component 1 position to the right
< 		rgb <= {1'b0,selcolor[11:9],1'b0,selcolor[7:5],1'b0,selcolor[3:1]};
< 	else // normal colour select
< 		rgb <= selcolor;
---
>     // extra half brite mode shifter
>     always @(posedge clk28m)
>         if (blank)
>             rgb <= 16'd0;
>             
>         else if (ham)
>             case(select[5:4])
>             2'b00 : rgb <= colortable[{0, select[3:0]}];
>             2'b01 : rgb <= {rgb[11:4],select[3:0]};
>             2'b10 : rgb <= {select[3:0],rgb[7:0]};
>             2'b11 : rgb <= {rgb[11:8],select[3:0],rgb[3:0]};
>             endcase
>             
>         // half bright, shift every component 1 position to the right
>         else if (select[5] && !a1k)
>             rgb <= {1'b0,selcolor[11:9],1'b0,selcolor[7:5],1'b0,selcolor[3:1]};
>             
>         // normal colour select
>         else
>             rgb <= selcolor;
428,432c463,467
< // local signals
< reg		[2:0] sprcode;			// sprite code
< wire	[3:0] sprgroup;			// grouped sprites
< wire	pf1front;				// playfield 1 is on front of sprites
< wire	pf2front;				// playfield 2 is on front of sprites
---
>     // local signals
>     reg		[2:0] sprcode;			// sprite code
>     wire	[3:0] sprgroup;			// grouped sprites
>     wire	pf1front;				// playfield 1 is on front of sprites
>     wire	pf2front;				// playfield 2 is on front of sprites
434,438c469,473
< // group sprites together
< assign	sprgroup[0] = (nsprite[1:0]==0) ? 0 : 1;
< assign	sprgroup[1] = (nsprite[3:2]==0) ? 0 : 1;
< assign	sprgroup[2] = (nsprite[5:4]==0) ? 0 : 1;
< assign	sprgroup[3] = (nsprite[7:6]==0) ? 0 : 1;
---
>     // group sprites together
>     assign	sprgroup[0] = (nsprite[1:0]==0) ? 0 : 1;
>     assign	sprgroup[1] = (nsprite[3:2]==0) ? 0 : 1;
>     assign	sprgroup[2] = (nsprite[5:4]==0) ? 0 : 1;
>     assign	sprgroup[3] = (nsprite[7:6]==0) ? 0 : 1;
440,451c475,486
< // sprites priority encoder
< always @(sprgroup)
< 	if (sprgroup[0])
< 		sprcode = 1;
< 	else if (sprgroup[1])
< 		sprcode = 2;
< 	else if (sprgroup[2])
< 		sprcode = 3;
< 	else if (sprgroup[3])
< 		sprcode = 4;
< 	else
< 		sprcode = 7;
---
>     // sprites priority encoder
>     always @(sprgroup)
>         if (sprgroup[0])
>             sprcode = 1;
>         else if (sprgroup[1])
>             sprcode = 2;
>         else if (sprgroup[2])
>             sprcode = 3;
>         else if (sprgroup[3])
>             sprcode = 4;
>         else
>             sprcode = 7;
453,455c488,490
< // check if playfields are in front of sprites
< assign pf1front = sprcode[2:0]>bplcon2[2:0] ? 1 : 0;
< assign pf2front = sprcode[2:0]>bplcon2[5:3] ? 1 : 0;
---
>     // check if playfields are in front of sprites
>     assign pf1front = sprcode[2:0]>bplcon2[2:0] ? 1 : 0;
>     assign pf2front = sprcode[2:0]>bplcon2[5:3] ? 1 : 0;
457,468c492,503
< // generate final playfield/sprite select signal
< always @(sprcode or pf1front or pf2front or nplayfield)
< begin
< 	if (sprcode[2:0]==7) // if no valid sprite data, always select playfields
< 		sprsel = 0;
< 	else if (pf1front && nplayfield[1]) // else if pf1 in front and valid data, select playfields
< 		sprsel = 0;
< 	else if (pf2front && nplayfield[2]) // else if pf2 in front and valid data, select playfields
< 		sprsel = 0;
< 	else // else select sprites
< 		sprsel = 1;
< end
---
>     // generate final playfield/sprite select signal
>     always @(sprcode or pf1front or pf2front or nplayfield)
>     begin
>         if (sprcode[2:0]==7) // if no valid sprite data, always select playfields
>             sprsel = 0;
>         else if (pf1front && nplayfield[1]) // else if pf1 in front and valid data, select playfields
>             sprsel = 0;
>         else if (pf2front && nplayfield[2]) // else if pf2 in front and valid data, select playfields
>             sprsel = 0;
>         else // else select sprites
>             sprsel = 1;
>     end
471,486d505
< 
< //--------------------------------------------------------------------------------------
< //--------------------------------------------------------------------------------------
< 
< // this module handles the hold and modify mode (HAM)
< // the module has its own colour pallete bank, this is to let 
< // the sprites run simultanously with a HAM playfield
< module hamgenerator
< (
< 	input 	clk,		   			// bus clock
< 	input	clk28m,					// 35ns pixel clock
< 	input 	[8:1] reg_address_in,	// register adress inputs
< 	input 	[11:0] data_in,			// bus data in
< 	input	[5:0] bpldata,			// bitplane data input
< 	output	reg [11:0] rgb			// RGB output
< );
488,489d506
< //register names and adresses
< parameter COLORBASE = 9'h180;		// colour table base address
491,494d507
< //local signals
< reg 	[11:0] colortable [15:0];	// colour table
< wire	[11:0] selcolor;			// selected colour output from colour table
< 
496,504d508
< 
< //writing of HAM colour table from bus (implemented using dual port distributed ram)
< always @(posedge clk)
< 	if (reg_address_in[8:5]==COLORBASE[8:5])
< 		colortable[reg_address_in[4:1]] <= data_in[11:0];
< 
< //reading of colour table
< assign selcolor = colortable[bpldata[3:0]];
< 
507,526d510
< //HAM instruction decoder/processor
< always @(posedge clk28m)
< begin
< 	case (bpldata[5:4])
< 		2'b00://load rgb output with colour from table
< 			rgb <= selcolor;
< 		2'b01://hold green and red, modify blue
< 			rgb  <= {rgb[11:4],bpldata[3:0]};
< 		2'b10://hold green and blue, modify red
< 			rgb <= {bpldata[3:0],rgb[7:0]};
< 		2'b11://hold blue and red, modify green
< 			rgb <= {rgb[11:8],bpldata[3:0],rgb[3:0]};
< 	endcase
< end
< 
< endmodule
< 
< //--------------------------------------------------------------------------------------
< //--------------------------------------------------------------------------------------
< 
540,542c524,526
< //register names and adresses
< parameter CLXCON = 9'h098;
< parameter CLXDAT = 9'h00E;
---
>     //register names and adresses
>     parameter CLXCON = 9'h098;
>     parameter CLXDAT = 9'h00E;
544,549c528,533
< //local signals
< reg		[15:0] clxcon;			//collision detection control register
< reg		[14:0] clxdat;			//collision detection data register
< wire	[3:0] sprmatch;			//sprite group matches clxcon settings
< wire	oddmatch;				//odd bitplane data matches clxcon settings
< wire	evenmatch;				//even bitplane data matches clxcon settings
---
>     //local signals
>     reg		[15:0] clxcon;			//collision detection control register
>     reg		[14:0] clxdat;			//collision detection data register
>     wire	[3:0] sprmatch;			//sprite group matches clxcon settings
>     wire	oddmatch;				//odd bitplane data matches clxcon settings
>     wire	evenmatch;				//even bitplane data matches clxcon settings
551c535
< //--------------------------------------------------------------------------------------
---
>     //--------------------------------------------------------------------------------------
553,558c537,542
< //CLXCON register
< always @(posedge clk)
< 	if (reset) //reset to safe value
< 		clxcon <= 16'h0fff;
< 	else if (reg_address_in[8:1]==CLXCON[8:1])
< 		clxcon <= data_in;
---
>     //CLXCON register
>     always @(posedge clk)
>         if (reset) //reset to safe value
>             clxcon <= 16'h0fff;
>         else if (reg_address_in[8:1]==CLXCON[8:1])
>             clxcon <= data_in;
560c544
< //--------------------------------------------------------------------------------------
---
>     //--------------------------------------------------------------------------------------
562,564c546,548
< //generate bitplane match signal
< wire [5:0] bm;
< assign bm = (bpldata[5:0] ^ ~clxcon[5:0]) | (~clxcon[11:6]); // JB: playfield collision detection fix
---
>     //generate bitplane match signal
>     wire [5:0] bm;
>     assign bm = (bpldata[5:0] ^ ~clxcon[5:0]) | (~clxcon[11:6]); // JB: playfield collision detection fix
566,572c550,556
< // this is the implementation of an undocumented function in the real Denise chip, developed by Yaqube.
< // trigger was the game Rotor. mentioned in WinUAE sources to be the only known game needing this feature.
< // it also fixes the Spaceport instandly helicopter crash at takeoff
< // and Archon-1 'sticky effect' of player sprite at the battlefield.
< // the OCS mystery is cleaning up :)
< assign oddmatch = bm[4] & bm[2] & bm[0] & (dblpf | evenmatch);
< assign evenmatch = bm[5] & bm[3] & bm[1];
---
>     // this is the implementation of an undocumented function in the real Denise chip, developed by Yaqube.
>     // trigger was the game Rotor. mentioned in WinUAE sources to be the only known game needing this feature.
>     // it also fixes the Spaceport instandly helicopter crash at takeoff
>     // and Archon-1 'sticky effect' of player sprite at the battlefield.
>     // the OCS mystery is cleaning up :)
>     assign oddmatch = bm[4] & bm[2] & bm[0] & (dblpf | evenmatch);
>     assign evenmatch = bm[5] & bm[3] & bm[1];
574,578c558,562
< //generate sprite group match signal
< assign sprmatch[0] = nsprite[0] | (nsprite[1] & clxcon[12]);
< assign sprmatch[1] = nsprite[2] | (nsprite[3] & clxcon[13]);
< assign sprmatch[2] = nsprite[4] | (nsprite[5] & clxcon[14]);
< assign sprmatch[3] = nsprite[6] | (nsprite[7] & clxcon[15]);
---
>     //generate sprite group match signal
>     assign sprmatch[0] = nsprite[0] | (nsprite[1] & clxcon[12]);
>     assign sprmatch[1] = nsprite[2] | (nsprite[3] & clxcon[13]);
>     assign sprmatch[2] = nsprite[4] | (nsprite[5] & clxcon[14]);
>     assign sprmatch[3] = nsprite[6] | (nsprite[7] & clxcon[15]);
580c564
< //--------------------------------------------------------------------------------------
---
>     //--------------------------------------------------------------------------------------
582,584c566,568
< //detect collisions
< wire [14:0] cl;
< reg clxdat_read_del;
---
>     //detect collisions
>     wire [14:0] cl;
>     reg clxdat_read_del;
586,600c570,584
< assign cl[0]  = evenmatch   & oddmatch;		//odd to even bitplanes
< assign cl[1]  = oddmatch    & sprmatch[0];	//odd bitplanes to sprite 0(or 1)
< assign cl[2]  = oddmatch    & sprmatch[1];	//odd bitplanes to sprite 2(or 3)
< assign cl[3]  = oddmatch    & sprmatch[2];	//odd bitplanes to sprite 4(or 5)
< assign cl[4]  = oddmatch    & sprmatch[3];	//odd bitplanes to sprite 6(or 7)
< assign cl[5]  = evenmatch   & sprmatch[0];	//even bitplanes to sprite 0(or 1)
< assign cl[6]  = evenmatch   & sprmatch[1];	//even bitplanes to sprite 2(or 3)
< assign cl[7]  = evenmatch   & sprmatch[2];	//even bitplanes to sprite 4(or 5)
< assign cl[8]  = evenmatch   & sprmatch[3];	//even bitplanes to sprite 6(or 7)
< assign cl[9]  = sprmatch[0] & sprmatch[1];	//sprite 0(or 1) to sprite 2(or 3)
< assign cl[10] = sprmatch[0] & sprmatch[2];	//sprite 0(or 1) to sprite 4(or 5)
< assign cl[11] = sprmatch[0] & sprmatch[3];	//sprite 0(or 1) to sprite 6(or 7)
< assign cl[12] = sprmatch[1] & sprmatch[2];	//sprite 2(or 3) to sprite 4(or 5)
< assign cl[13] = sprmatch[1] & sprmatch[3];	//sprite 2(or 3) to sprite 6(or 7)
< assign cl[14] = sprmatch[2] & sprmatch[3];	//sprite 4(or 5) to sprite 6(or 7)
---
>     assign cl[0]  = evenmatch   & oddmatch;		//odd to even bitplanes
>     assign cl[1]  = oddmatch    & sprmatch[0];	//odd bitplanes to sprite 0(or 1)
>     assign cl[2]  = oddmatch    & sprmatch[1];	//odd bitplanes to sprite 2(or 3)
>     assign cl[3]  = oddmatch    & sprmatch[2];	//odd bitplanes to sprite 4(or 5)
>     assign cl[4]  = oddmatch    & sprmatch[3];	//odd bitplanes to sprite 6(or 7)
>     assign cl[5]  = evenmatch   & sprmatch[0];	//even bitplanes to sprite 0(or 1)
>     assign cl[6]  = evenmatch   & sprmatch[1];	//even bitplanes to sprite 2(or 3)
>     assign cl[7]  = evenmatch   & sprmatch[2];	//even bitplanes to sprite 4(or 5)
>     assign cl[8]  = evenmatch   & sprmatch[3];	//even bitplanes to sprite 6(or 7)
>     assign cl[9]  = sprmatch[0] & sprmatch[1];	//sprite 0(or 1) to sprite 2(or 3)
>     assign cl[10] = sprmatch[0] & sprmatch[2];	//sprite 0(or 1) to sprite 4(or 5)
>     assign cl[11] = sprmatch[0] & sprmatch[3];	//sprite 0(or 1) to sprite 6(or 7)
>     assign cl[12] = sprmatch[1] & sprmatch[2];	//sprite 2(or 3) to sprite 4(or 5)
>     assign cl[13] = sprmatch[1] & sprmatch[3];	//sprite 2(or 3) to sprite 6(or 7)
>     assign cl[14] = sprmatch[2] & sprmatch[3];	//sprite 4(or 5) to sprite 6(or 7)
602c586
< wire clxdat_read = (reg_address_in[8:1]==CLXDAT[8:1]);// clxdat read
---
>     wire clxdat_read = (reg_address_in[8:1]==CLXDAT[8:1]);// clxdat read
604,615c588,599
< always @(posedge clk)
< 	clxdat_read_del <= clxdat_read;  
< 	
< //register detected collisions
< always @(posedge clk)
< //	if (reg_address_in[8:1]==CLXDAT[8:1])		//if clxdat is read, clxdat is cleared to all zero's
< 	if (!clxdat_read & clxdat_read_del)	//if clxdat is read, clxdat is cleared to all zero's after read
< 		clxdat <= 0;
< 	else //else register collisions
< 		clxdat <= clxdat[14:0] | cl[14:0];
< 		
< //--------------------------------------------------------------------------------------
---
>     always @(posedge clk)
>         clxdat_read_del <= clxdat_read;  
>         
>     //register detected collisions
>     always @(posedge clk)
>     //	if (reg_address_in[8:1]==CLXDAT[8:1])		//if clxdat is read, clxdat is cleared to all zero's
>         if (!clxdat_read & clxdat_read_del)	//if clxdat is read, clxdat is cleared to all zero's after read
>             clxdat <= 0;
>         else //else register collisions
>             clxdat <= clxdat[14:0] | cl[14:0];
>             
>     //--------------------------------------------------------------------------------------
617,618c601,602
< //reading of clxdat register
< assign data_out = reg_address_in[8:1]==CLXDAT[8:1] ? {1'b1,clxdat[14:0]} : 0;
---
>     //reading of clxdat register
>     assign data_out = reg_address_in[8:1]==CLXDAT[8:1] ? {1'b1,clxdat[14:0]} : 0;
