2c2
< //
---
> // 
4c4
< //
---
> // 
9c9
< //
---
> // 
14c14
< //
---
> // 
16,19c16,19
< // along with this program.  If not, see <http://www.gnu.org/licenses/>.
< //
< //
< //
---
> // along with this program.  If not, see <http:         // www.gnu.org/licenses/>.
> // 
> // 
> // 
28,31c28,31
< //
< // 10-01-2006	- first serious version
< // 11-01-2006	- done lot's of work, Amber is now finished
< // 29-12-2006	- added support for OSD overlay
---
> // 
> // 10-01-2006   - first serious version
> // 11-01-2006   - done lot's of work, Amber is now finished
> // 29-12-2006   - added support for OSD overlay
34,42c34,42
< // 2008-02-26	- synchronous 28 MHz version
< // 2008-02-28	- horizontal and vertical interpolation
< // 2008-02-02	- hfilter/vfilter inputs added, unused inputs removed
< // 2008-12-12	- useless scanline effect implemented
< // 2008-12-27	- clean-up
< // 2009-05-24	- clean-up & renaming
< // 2009-08-31	- scanlines synthesis option
< // 2010-05-30	- htotal changed
< //
---
> // 2008-02-26   - synchronous 28 MHz version
> // 2008-02-28   - horizontal and vertical interpolation
> // 2008-02-02   - hfilter/vfilter inputs added, unused inputs removed
> // 2008-12-12   - useless scanline effect implemented
> // 2008-12-27   - clean-up
> // 2009-05-24   - clean-up & renaming
> // 2009-08-31   - scanlines synthesis option
> // 2010-05-30   - htotal changed
> // 
44a45,48
> //
> // RNC:
> // 2022-03-04  - fixed scanlines to not reduce brightness
> // 2022-03-22  - changed h-filter to simple kalman
48,67c52,71
< 	input 	clk28m,
< 	input	[1:0] lr_filter,		//interpolation filters settings for low resolution
< 	input	[1:0] hr_filter,		//interpolation filters settings for high resolution
< 	input	[1:0] scanline,			//scanline effect enable
< 	input	[8:1] htotal,			//video line length
< 	input	hires,					//display is in hires mode (from bplcon0)
< 	input	dblscan,				//enable VGA output (enable scandoubler)
< 	input	osd_blank,				//OSD overlay enable (blank normal video)
< 	input	osd_pixel,				//OSD pixel(video) data
< 	input 	[3:0] red_in, 			//red componenent video in
< 	input 	[3:0] green_in,  		//green component video in
< 	input 	[3:0] blue_in,			//blue component video in
< 	input	_hsync_in,				//horizontal synchronisation in
< 	input	_vsync_in,				//vertical synchronisation in
< 	input	_csync_in,				//composite synchronization in
< 	output 	reg [3:0] red_out, 		//red componenent video out
< 	output 	reg [3:0] green_out,  	//green component video out
< 	output 	reg [3:0] blue_out,		//blue component video out
< 	output	reg _hsync_out,			//horizontal synchronisation out
< 	output	reg _vsync_out			//vertical synchronisation out
---
>     input   clk28m,
>     input   [1:0] lr_filter,                            // interpolation filters settings for low resolution
>     input   [1:0] hr_filter,                            // interpolation filters settings for high resolution
>     input   [1:0] scanline,                             // scanline effect enable
>     input   [8:1] htotal,                               // video line length
>     input   hires,                                      // display is in hires mode (from bplcon0)
>     input   dblscan,                                    // enable VGA output (enable scandoubler)
>     input   osd_blank,                                  // OSD overlay enable (blank normal video)
>     input   osd_pixel,                                  // OSD pixel(video) data
>     input   [3:0] red_in,                               // red componenent video in
>     input   [3:0] grn_in,                               // grn component video in
>     input   [3:0] blu_in,                               // blu component video in
>     input   _hsync_in,                                  // horizontal synchronisation in
>     input   _vsync_in,                                  // vertical synchronisation in
>     input   _csync_in,                                  // composite synchronization in
>     output  reg [3:0] red_out,                          // red componenent video out
>     output  reg [3:0] grn_out,                          // grn component video out
>     output  reg [3:0] blu_out,                          // blu component video out
>     output      _hsync_out,                             // horizontal synchronisation out
>     output      _vsync_out                              // vertical synchronisation out
70,73c74,77
< //local signals
< reg 	[3:0] t_red;
< reg 	[3:0] t_green;
< reg 	[3:0] t_blue;
---
>     // Local signals
>     wire     [3:0] t_red;
>     wire     [3:0] t_grn;
>     wire     [3:0] t_blu;
75,77c79,81
< reg 	[3:0] red_del;				//delayed by 70ns for horizontal interpolation
< reg 	[3:0] green_del;			//delayed by 70ns for horizontal interpolation
< reg 	[3:0] blue_del;				//delayed by 70ns for horizontal interpolation
---
>     wire     [3:0] f_red;
>     wire     [3:0] f_grn;
>     wire     [3:0] f_blu;
79,81c83,84
< wire 	[4:0] red;					//signal after horizontal interpolation
< wire	[4:0] green;				//signal after horizontal interpolation
< wire 	[4:0] blue;					//signal after horizontal interpolation
---
>     wire           t_osd_bg;
>     wire           t_osd_fg;
83,85c86,89
< reg		_hsync_in_del;				//delayed horizontal synchronisation input
< reg		hss;						//horizontal sync start
< wire	eol;						//end of scan-doubled line
---
>     // signal after horizontal filter
>     wire    [3:0] red;
>     wire    [3:0] grn;
>     wire    [3:0] blu;
87,90c91,93
< reg		hfilter;					//horizontal interpolation enable
< reg		vfilter;					//vertical interpolation enable
< 	
< reg		scanline_ena;				//signal active when the scan-doubled line is displayed
---
>     reg     _hsync_in_del;                                  // delayed horizontal synchronisation input
>     reg     hss;                                            // horizontal sync start
>     wire    eol;                                            // end of scan-doubled line
92c95,98
< //-----------------------------------------------------------------------------//
---
>     reg     hfilter;                                        // horizontal interpolation enable
>     //reg     vfilter;                                        // vertical interpolation enable
>         
>     reg     scanline_ena;                                   // signal active when the scan-doubled line is displayed
94,96c100,103
< // local horizontal counters for scan doubling
< reg		[10:0] wr_ptr;				//line buffer write pointer
< reg		[10:0] rd_ptr;				//line buffer read pointer
---
>     // horizontal filter
>     reg [5:0] red_filter;
>     reg [5:0] grn_filter;
>     reg [5:0] blu_filter;
98,100d104
< //delayed hsync for edge detection
< always @(posedge clk28m)
< 	_hsync_in_del <= _hsync_in;
102,104c106
< //horizontal sync start	(falling edge detection)
< always @(posedge clk28m)
< 	hss <= ~_hsync_in & _hsync_in_del;
---
>     // -----------------------------------------------------------------------------
106,113c108,110
< // pixels delayed by one hires pixel for horizontal interpolation
< always @(posedge clk28m)
< 	if (wr_ptr[0])	//sampled at 14MHz (hires clock rate)
< 		begin
< 			red_del <= red_in;
< 			green_del <= green_in;
< 			blue_del <= blue_in;
< 		end
---
>     // local horizontal counters for scan doubling 
>     reg [10:0] wr_ptr;                                      // line buffer write pointer
>     reg [10:0] rd_ptr;                                      // line buffer read pointer
115,118c112,113
< //horizontal interpolation
< assign red	= hfilter ? red_in + red_del : red_in * 2;
< assign green = hfilter ? green_in + green_del : green_in * 2;
< assign blue	= hfilter ? blue_in + blue_del : blue_in * 2;
---
>     reg [15:0] lbf [1023:0];                                // line buffer for scan doubling (there are 908/910 hires pixels in every line)
>     reg [15:0] lbfo;                                        // line buffer output register
120,125c115,116
< // line buffer write pointer
< always @(posedge clk28m)
< 	if (hss)
< 		wr_ptr <= 0;
< 	else
< 		wr_ptr <= wr_ptr + 1;
---
>     // end of scan-doubled line
>     assign eol = (rd_ptr == {htotal[8:1],2'b11});
127,128c118,137
< //end of scan-doubled line
< assign eol = rd_ptr=={htotal[8:1],2'b11} ? 1'b1 : 1'b0;
---
>     // horizontal sync start (falling edge detection)
>     always @(posedge clk28m) begin
>         // delayed hsync for edge detection
>         _hsync_in_del <= _hsync_in;
>         hss <= ~_hsync_in & _hsync_in_del;
>         // line buffer write pointer
>         wr_ptr <= (hss) ? 0 : (wr_ptr + 1);
>         // line buffer read pointer
>         rd_ptr <= (hss | eol) ? 0 : (rd_ptr + 1);
>         // scanline enable
>         scanline_ena <= (hss) ? 0 : (eol) ? 1 : scanline_ena;
>         // horizontal interpolation enable
>         if (hss) hfilter <= hires ? hr_filter[0] : lr_filter[0]; 
>     end
>         
>     always @(posedge clk28m) begin
>         red_filter <= red_filter - (red_filter >> 2) + red_in;
>         grn_filter <= grn_filter - (grn_filter >> 2) + grn_in;
>         blu_filter <= blu_filter - (blu_filter >> 2) + blu_in;
>     end    
130,135c139,141
< //line buffer read pointer
< always @(posedge clk28m)
< 	if (hss || eol)
< 		rd_ptr <= 0;
< 	else
< 		rd_ptr <= rd_ptr + 1;
---
>     assign red = hfilter ? red_filter[5:2] : red_in;
>     assign grn = hfilter ? grn_filter[5:2] : grn_in;
>     assign blu = hfilter ? blu_filter[5:2] : blu_in;
137,146c143,153
< always @(posedge clk28m)
< 	if (hss)
< 		scanline_ena <= 0;
< 	else if (eol)
< 		scanline_ena <= 1;
< 		
< //horizontal interpolation enable
< always @(posedge clk28m)
< 	if (hss)
< 		hfilter <= hires ? hr_filter[0] : lr_filter[0];		//horizontal interpolation enable
---
>     always @(posedge clk28m) begin
>         // line buffer write
>         lbf[wr_ptr[10:1]] <= { 1'b0, _hsync_in, osd_blank, osd_pixel, red, grn, blu };
>         // line buffer read
>         lbfo <= lbf[rd_ptr[9:0]];
>     end
>          
>     // output pixel generation - OSD mixer and vertical interpolation     
>     assign f_red = dblscan ? (lbfo[11:8]) : red_in;
>     assign f_grn = dblscan ? (lbfo[ 7:4]) : grn_in;
>     assign f_blu = dblscan ? (lbfo[ 3:0]) : blu_in;
148,151c155,156
< //vertical interpolation enable
< always @(posedge clk28m)
< 	if (hss)
< 		vfilter <= hires ? hr_filter[1] : lr_filter[1];		//vertical interpolation enable
---
>     assign _hsync_out = dblscan ? lbfo[14] : _csync_in;
>     assign _vsync_out = dblscan ? _vsync_in : 1'b1;
153,157c158,159
< reg	[17:0] lbf [1023:0];	// line buffer for scan doubling (there are 908/910 hires pixels in every line)
< reg [17:0] lbfo;			// line buffer output register
< reg [17:0] lbfo2;			// compensantion for one clock delay of the second line buffer
< reg	[17:0] lbfd [1023:0];	// delayed line buffer for vertical interpolation
< reg [17:0] lbfdo;			// delayed line buffer output register
---
>     assign t_osd_bg = dblscan ? lbfo[13] : osd_blank;
>     assign t_osd_fg = dblscan ? lbfo[12] : osd_pixel;
159,161c161,163
< // line buffer write
< always @(posedge clk28m)
< 	lbf[wr_ptr[10:1]] <= { _hsync_in, osd_blank, osd_pixel, red, green, blue };
---
>     assign t_red = t_osd_bg ? (t_osd_fg ? 4'b1110 : (f_red / 2)) : f_red;
>     assign t_grn = t_osd_bg ? (t_osd_fg ? 4'b1110 : (f_grn / 2)) : f_grn;
>     assign t_blu = t_osd_bg ? (t_osd_fg ? 4'b1110 : (f_blu / 2) + 4'b0100) : f_blu;
163,165c165,185
< //line buffer read
< always @(posedge clk28m)
< 	lbfo <= lbf[rd_ptr[9:0]];
---
>     always @(posedge clk28m) begin
>         if (scanline[0]) begin
>             // Dark lines                                         // F                 L L L L L L L W  \   W white
>             if (scanline_ena) begin                               // E               L                  |   L light
>                 red_out <= { t_red[2:0], 1'b1 } & {4{t_red[3]}};  // D                             D    |   D dark
>                 grn_out <= { t_grn[2:0], 1'b1 } & {4{t_grn[3]}};  // C             L                    |   B black
>                 blu_out <= { t_blu[2:0], 1'b1 } & {4{t_blu[3]}};  // B                           D      |
>                                                                   // A           L                      |
>             // Light lines                                        // 9                         D        |
>             end else begin                                        // 8         L                        \_ Output
>                 red_out <= { t_red[2:0], 1'b0 } | {4{t_red[3]}};  // 7                       D          /  Levels
>                 grn_out <= { t_grn[2:0], 1'b0 } | {4{t_grn[3]}};  // 6       L                          |
>                 blu_out <= { t_blu[2:0], 1'b0 } | {4{t_blu[3]}};  // 5                     D            |
>             end                                                   // 4     L                            |
>                                                                   // 3                   D              |
>         end else begin                                            // 2   L                              |
>                 red_out <= t_red;                                 // 1                 D                |
>                 grn_out <= t_grn;                                 // 0 B D D D D D D D                  /
>                 blu_out <= t_blu;                                 //   0 1 2 3 4 5 6 7 8 9 A B C D E F  <-- Input Level
>         end
>     end
167,169c187
< //delayed line buffer write
< always @(posedge clk28m)
< 	lbfd[rd_ptr[9:0]] <= lbfo;
---
> endmodule
171,173d188
< //delayed line buffer read
< always @(posedge clk28m)
< 	lbfdo <= lbfd[rd_ptr[9:0]];
175,177d189
< //delayed line buffer pixel by one clock cycle
< always @(posedge clk28m)
< 	lbfo2 <= lbfo;
179,183d190
< // output pixel generation - OSD mixer and vertical interpolation
< always @(posedge clk28m)
< begin
< 		_hsync_out <= dblscan ? lbfo2[17] : _csync_in;
< 		_vsync_out <= dblscan ? _vsync_in : 1'b1;
185,270d191
< 		if (~dblscan)
< 		begin  // 15KHz pass through
< 			if (osd_blank) //osd window
< 			begin
< 				if (osd_pixel)	//osd text colour
< 				begin
< 					t_red    <= 4'b1110;
< 					t_green  <= 4'b1110;
< 					t_blue   <= 4'b1110;
< 				end
< 				else //osd background
< 				begin
< 					t_red    <= 4'b0000 + red_in / 2;
< 					t_green  <= 4'b0000 + green_in / 2;
< 					t_blue   <= 4'b0100 + blue_in / 2;
< 				end
< 			end
< 			else //no osd
< 			begin
< 					t_red    <= red_in;
< 					t_green  <= green_in;
< 					t_blue   <= blue_in;
< 			end
< 		end
< 		else // 31KHz double scan
< 		begin
< 			if (lbfo2[16]) //osd window
< 			begin
< 				if (lbfo2[15])	//osd text colour
< 				begin
< 					t_red    <= 4'b1110;
< 					t_green  <= 4'b1110;
< 					t_blue   <= 4'b1110;
< 				end
< 				else	//osd background
< 				if (vfilter)
< 					begin
< 						t_red    <= 4'b0000 + ( lbfo2[14:10] + lbfdo[14:10] ) / 8;
< 						t_green  <= 4'b0000 + ( lbfo2[9:5] + lbfdo[9:5] ) / 8;
< 						t_blue   <= 4'b0100 + ( lbfo2[4:0] + lbfdo[4:0] ) / 8;
< 					end
< 				else //dimmed transparent background without vertical interpolation
< 					begin
< 						t_red    <= 4'b0000 + lbfo2[14:11] / 2;
< 						t_green  <= 4'b0000 + lbfo2[9:6] / 2;
< 						t_blue   <= 4'b0100 + lbfo2[4:1] / 2;
< 					end
< 			end
< 			else	//no osd
< 				if (vfilter)
< 				begin //vertical interpolation
< 					if (scanline[0] & scanline_ena)
< 					begin
< 						t_red    <= (( lbfo2[14:10] + lbfdo[14:10] ) / 4) / 2;
< 						t_green  <= (( lbfo2[9:5] + lbfdo[9:5] ) / 4) / 2;
< 						t_blue   <= (( lbfo2[4:0] + lbfdo[4:0] ) / 4) / 2;
< 					end
< 					else
< 					begin
< 						t_red    <= ( lbfo2[14:10] + lbfdo[14:10] ) / 4;
< 						t_green  <= ( lbfo2[9:5] + lbfdo[9:5] ) / 4;
< 						t_blue   <= ( lbfo2[4:0] + lbfdo[4:0] ) / 4;
< 					end
< 				end
< 				else
< 				begin //no vertical interpolation
< 					if (scanline[0] & scanline_ena)
< 					begin
< 						t_red    <= lbfo2[14:11] / 2;
< 						t_green  <= lbfo2[9:6] / 2;
< 						t_blue   <= lbfo2[4:1] / 2;
< 					end
< 					else
< 					begin
< 						t_red    <= lbfo2[14:11];
< 						t_green  <= lbfo2[9:6];
< 						t_blue   <= lbfo2[4:1];
< 					end
< 				end
< 		end
< end
< 
< always @(posedge clk28m)
< 		{red_out,green_out,blue_out} <= {t_red,t_green,t_blue};
< 
< endmodule
